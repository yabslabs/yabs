syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

package yabs.runner.api.v1;

option go_package = "API";


option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "yabs runner";
        version: "2.0";
        contact: {
            url: "https://github.com/yabslabs/yabs"
        };
    };

    schemes: HTTPS;

    consumes: "application/json";
    consumes: "application/grpc";

    produces: "application/json";
    produces: "application/grpc";
};

service RunnerService {
    rpc RegisterRunner(Runner) returns (Runner) {
        option (google.api.http) = {
           post: "/runner"
           body: "*"
        };
    }

    rpc ListRunners(RunnerFilter) returns (Runners) {
        option (google.api.http) = {
           get: "/runner"
        };
    }

    rpc DeleteRunner(RunnerID) returns (RunnerID) {
        option (google.api.http) = {
           delete: "/runner/{id}"
           body: "*"
        };
    }

    rpc SupendRunner(RunnerID) returns (RunnerID) {
        option (google.api.http) = {
           put: "/runner/{id}/_suspend"
           body: "*"
        };
    }

    rpc ListRunnerJobs(RunnerID) returns (Jobs) {
        option (google.api.http) = {
           get: "/runner/{id}/jobs"
        };
    }    

    rpc ListRunnerProjects(RunnerID) returns (Projects) {
        option (google.api.http) = {
           get: "/runner/{id}/projects"
        };
    }    

    rpc ListRunnerGroups(RunnerID) returns (Groups) {
        option (google.api.http) = {
           get: "/runner/{id}/groups"
        };
    }

    // The Runner needs to send his token to the health endpoint, this happens by using the authorization header 
    // This endpoint is important to verify if the runners can communicate with the API or if a job need rescheduling
    rpc HealthCheckRunner(Runner) returns (google.rpc.Status) {
        option (google.api.http) = {
           post: "/runner/healthz"
           body: "*"
        };
    }
}

message RunnerID {
    string id = 1;
}

message RunnerFilter {
    int64 limit = 1;
    int64 offset = 2;
    string sort = 3;
    string name = 4;
    Status status = 5;
    google.protobuf.Timestamp creationDate = 6;
    google.protobuf.Timestamp changeDate = 7;
    RunnerType runnertype = 8;
}

message Runner {
    uint64 runnerid = 1; 
    string name = 2; 
    Status status = 3;
    RunnerType runnertype = 4;
    string descritpion = 5;
    bool active = 6;
    string ipaddress = 7;
}

message Runners {
    repeated Runner runners = 1;
}

// This defines on which level a runner ist registered
enum RunnerType {
    UNKNOWN = 0;
    INSTACE = 1;
    GROUP = 2;
    PROJECT = 3;
}

enum Status {
    UNKNOWN = 0;
    ACTIVE = 1;
    PAUSED = 2;
    ONLINE = 3;
    OFFLINE = 4;
}